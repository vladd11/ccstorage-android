// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// @brief Read barcode from image bytes.
  /// @param bytes Image bytes.
  /// @param format Specify a set of BarcodeFormats that should be searched for.
  /// @param width Image width in pixels.
  /// @param height Image height in pixels.
  /// @param cropWidth Crop width.
  /// @param cropHeight Crop height.
  /// @param tryHarder Spend more time to try to find a barcode; optimize for accuracy, not speed.
  /// @param tryRotate Also try detecting code in 90, 180 and 270 degree rotated images.
  /// @return The barcode result.
  ffi.Pointer<ffi.Char> readBarcode(
    ffi.Pointer<ffi.Uint8> data,
    int width,
    int height,
    int pixStride,
    int rowStride,
  ) {
    return _readBarcode(
      data,
      width,
      height,
      pixStride,
      rowStride,
    );
  }

  late final _readBarcodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('readBarcode');
  late final _readBarcode = _readBarcodePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Uint8>, int, int, int, int)>();
}
